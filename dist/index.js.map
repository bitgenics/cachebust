{"version":3,"sources":["../src/index.js"],"names":["crypto","require","path","fse","globby","fixedRootFiles","fixedNamesPatterns","ensureArray","item","Array","isArray","trimSlashes","str","startsWith","substring","endsWith","length","toPath","replace","sep","hashFile","contents","hash","createHash","update","digest","generateNewName","file","checksum","dirname","ext","extname","basename","join","renameStatics","src","staticPatterns","shouldCopy","mapping","files","cwd","promises","map","filename","resolve","readFile","newFile","copy","rename","Promise","all","shuffleDirs","staticSrc","staticTarget","overwrite","tmpSrc","ensureDir","move","getAllPatterns","rootFiles","concat","replaceRefs","dir","patterns","currentPrefix","targetPrefix","mappings","regex","RegExp","report","replaced","match","p1","fragment","p3","newUrl","list","push","from","to","writeFile","bumpRootFiles","currentDir","rootDir","fullFiles","uniqueFiles","Set","existingFiles","filter","pathExistsSync","cachebust","distDir","extraRootFiles","moveRootFiles","replacePatterns","staticDest","Error","allRootFiles","allPatterns","sameDir","console","log","e","module","exports","NEXT","CRA"],"mappings":"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","file":"index.js","sourcesContent":["const crypto = require('crypto')\nconst path = require('path')\nconst fse = require('fs-extra')\nconst globby = require('globby')\n\nconst fixedRootFiles = [\n  'favicon.ico',\n  'humans.txt',\n  'robots.txt',\n  'sitemap.xml',\n  '.well-known'\n]\n\nconst fixedNamesPatterns = ['!**/.well-known/**']\n\nconst ensureArray = (item) => Array.isArray(item) ? item : [item]\n\nconst trimSlashes = str => {\n  if (str.startsWith('/')) {\n    str = str.substring(1)\n  }\n  if (str.endsWith('/')) {\n    str = str.substring(0, str.length - 1)\n  }\n  return str\n}\n\nconst toPath = str => {\n  str = trimSlashes(str)\n  return str.replace('/', path.sep)\n}\n\nconst hashFile = contents => {\n  const hash = crypto.createHash('sha256')\n  hash.update(contents)\n  return hash.digest('hex').substring(0, 8)\n}\n\nconst generateNewName = (file, checksum) => {\n  const dirname = path.dirname(file)\n  const ext = path.extname(file)\n  const basename = path.basename(file, ext)\n  return path.join(dirname, `${basename}.${checksum}${ext}`)\n}\n\nconst renameStatics = async (src, staticPatterns, shouldCopy) => {\n  const mapping = {}\n  const files = await globby(staticPatterns, { cwd: src })\n  const promises = files.map(async file => {\n    const filename = path.resolve(src, file)\n    const contents = await fse.readFile(filename)\n    const checksum = hashFile(contents)\n    const newFile = generateNewName(file, checksum)\n    if(shouldCopy) {\n      await fse.copy(filename, path.resolve(src, newFile))\n    } else {\n      await fse.rename(filename, path.resolve(src, newFile))\n    }\n    mapping[file] = newFile\n  })\n  await Promise.all(promises)\n  return mapping\n}\n\nconst shuffleDirs = async (staticSrc, staticTarget, overwrite) => {\n  staticSrc = path.resolve(staticSrc)\n  if(overwrite) {\n    const tmpSrc = path.join(path.dirname(staticSrc), '__static')\n    await fse.rename(staticSrc, tmpSrc)\n    await fse.ensureDir(path.dirname(staticTarget))\n    await fse.move(tmpSrc, staticTarget)\n  } else {\n    await fse.copy(staticSrc, staticTarget)\n  }\n}\n\nconst getAllPatterns = (staticPatterns, rootFiles) => {\n  staticPatterns = ensureArray(staticPatterns)\n  return staticPatterns\n    .concat(fixedNamesPatterns)\n    .concat(rootFiles.map(file => `!${file}`))\n}\n\nconst replaceRefs = async (\n  dir,\n  patterns,\n  currentPrefix,\n  targetPrefix,\n  mappings\n) => {\n  targetPrefix = trimSlashes(targetPrefix)\n  const files = await globby(patterns, { cwd: path.resolve(dir) })\n  const regex = new RegExp(\n    `(['\"])\\/${trimSlashes(currentPrefix)}/(.*?)(['\"?])`,\n    'g'\n  )\n  const report = {}\n\n  for (let file of files) {\n    const filename = path.resolve(dir, file)\n    const contents = await fse.readFile(filename, 'utf-8')\n    const replaced = contents.replace(regex, (match, p1, fragment, p3) => {\n      fragment = mappings[fragment] || fragment\n      const newUrl = `${p1}/${targetPrefix}/${fragment}${p3}`\n      const list = report[file] || []\n      list.push({from: match, to: newUrl})\n      report[file] = list\n      return newUrl\n    })\n    await fse.writeFile(filename, replaced)\n  }\n  return report\n}\n\nconst bumpRootFiles = async (currentDir, rootDir, rootFiles) => {\n  const fullFiles = rootFiles.map(file => path.resolve(currentDir, file))\n  const uniqueFiles = [...new Set(fullFiles)]\n  const existingFiles = uniqueFiles.filter(file => fse.pathExistsSync(file))\n  const promises = existingFiles.map(file => {\n    const newFile = path.join(rootDir, path.basename(file))\n    fse.move(file, newFile)\n  })\n  await Promise.all(promises)\n}\n\nconst cachebust = async ({\n  currentPrefix,\n  distDir,\n  extraRootFiles = [],\n  moveRootFiles = false,\n  overwrite,\n  replacePatterns = '**/*.+(js|json|css|html)',\n  staticSrc,\n  staticDest,\n  staticPatterns = ['**/*'],\n  targetPrefix,\n} = {}) => {\n  if(!distDir) { throw new Error('distDir property is required') }\n  distDir = path.resolve(distDir)\n  if(!currentPrefix) { throw new Error('currentPrefix is required') }\n  staticSrc = staticSrc ? path.resolve(distDir, staticSrc) : path.resolve(distDir, toPath(currentPrefix));\n  staticDest = staticDest ? path.resolve(distDir, staticDest) : distDir;\n  targetPrefix = targetPrefix || currentPrefix\n  overwrite = staticSrc.startsWith(distDir)\n  const staticTarget = path.join(staticDest, toPath(targetPrefix))\n  extraRootFiles = ensureArray(extraRootFiles)\n  const allRootFiles = fixedRootFiles.concat(extraRootFiles)\n  const allPatterns = getAllPatterns(staticPatterns, allRootFiles)\n\n  try {\n    const sameDir = (staticSrc === staticTarget)\n    if(!sameDir) {\n      await shuffleDirs(staticSrc, staticTarget, overwrite)\n    }\n    const shouldCopy = sameDir && !overwrite\n    const mappings = await renameStatics(staticTarget, allPatterns, shouldCopy)\n    const report = await replaceRefs(distDir, replacePatterns, currentPrefix, targetPrefix, mappings)\n    console.log(report)\n    if (moveRootFiles) {\n      bumpRootFiles(staticTarget, staticDest, allRootFiles)\n    }\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nmodule.exports = cachebust\nmodule.exports.NEXT = {\n  distDir: './next',\n  staticSrc: './static',\n  currentPrefix: '/static',\n  overwrite: false\n}\nmodule.exports.CRA = {\n  distDir: './build',\n  currentPrefix: '/public',\n}"]}