{"version":3,"sources":["../src/index.js"],"names":["crypto","require","path","fse","globby","fixedRootFiles","fixedNamesPatterns","hashFile","contents","hash","createHash","update","digest","substring","generateNewName","file","checksum","dirname","ext","extname","basename","join","trimSlashes","str","startsWith","endsWith","length","toPath","replace","sep","renameStatics","src","staticPatterns","mapping","files","cwd","promises","map","filename","resolve","readFile","newFile","rename","Promise","all","shuffleDirs","staticSrc","staticTarget","targetPrefix","tmpSrc","ensureDir","move","getAllPatterns","rootFiles","Array","isArray","concat","replaceRefs","dir","patterns","currentPrefix","mappings","regex","RegExp","replaced","match","p1","uri","p3","newUri","writeFile","bumpRootFiles","currentDir","rootDir","fullFiles","uniqueFiles","Set","existingFiles","filter","pathExistsSync","cachebust","replacePatterns","staticDest","extraRootFiles","moveRootFiles","allRootFiles","allPatterns","module","exports"],"mappings":";;;;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,MAAMF,QAAQ,UAAR,CAAZ;AACA,MAAMG,SAASH,QAAQ,QAAR,CAAf;;AAEA,MAAMI,iBAAiB,CACrB,aADqB,EAErB,YAFqB,EAGrB,YAHqB,EAIrB,aAJqB,EAKrB,aALqB,CAAvB;;AAQA,MAAMC,qBAAqB,CAAC,oBAAD,CAA3B;;AAEA,MAAMC,WAAWC,YAAY;AAC3B,QAAMC,OAAOT,OAAOU,UAAP,CAAkB,QAAlB,CAAb;AACAD,OAAKE,MAAL,CAAYH,QAAZ;AACA,SAAOC,KAAKG,MAAL,CAAY,KAAZ,EAAmBC,SAAnB,CAA6B,CAA7B,EAAgC,CAAhC,CAAP;AACD,CAJD;;AAMA,MAAMC,kBAAkB,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC1C,QAAMC,UAAUf,KAAKe,OAAL,CAAaF,IAAb,CAAhB;AACA,QAAMG,MAAMhB,KAAKiB,OAAL,CAAaJ,IAAb,CAAZ;AACA,QAAMK,WAAWlB,KAAKkB,QAAL,CAAcL,IAAd,EAAoBG,GAApB,CAAjB;AACA,SAAOhB,KAAKmB,IAAL,CAAUJ,OAAV,EAAoB,GAAEG,QAAS,IAAGJ,QAAS,GAAEE,GAAI,EAAjD,CAAP;AACD,CALD;;AAOA,MAAMI,cAAcC,OAAO;AACzB,MAAIA,IAAIC,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACvBD,UAAMA,IAAIV,SAAJ,CAAc,CAAd,CAAN;AACD;AACD,MAAIU,IAAIE,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACrBF,UAAMA,IAAIV,SAAJ,CAAc,CAAd,EAAiBU,IAAIG,MAAJ,GAAa,CAA9B,CAAN;AACD;AACD,SAAOH,GAAP;AACD,CARD;;AAUA,MAAMI,SAASJ,OAAO;AACpBA,QAAMD,YAAYC,GAAZ,CAAN;AACA,SAAOA,IAAIK,OAAJ,CAAY,GAAZ,EAAiB1B,KAAK2B,GAAtB,CAAP;AACD,CAHD;;AAKA,MAAMC;AAAA,+BAAgB,WAAOC,GAAP,EAAYC,cAAZ,EAA+B;AACnD,UAAMC,UAAU,EAAhB;AACA,UAAMC,QAAQ,MAAM9B,OAAO4B,cAAP,EAAuB,EAAEG,KAAKJ,GAAP,EAAvB,CAApB;AACA,UAAMK,WAAWF,MAAMG,GAAN;AAAA,oCAAU,WAAMtB,IAAN,EAAc;AACvC,cAAMuB,WAAWpC,KAAKqC,OAAL,CAAaR,GAAb,EAAkBhB,IAAlB,CAAjB;AACA,cAAMP,WAAW,MAAML,IAAIqC,QAAJ,CAAaF,QAAb,CAAvB;AACA,cAAMtB,WAAWT,SAASC,QAAT,CAAjB;AACA,cAAMiC,UAAU3B,gBAAgBC,IAAhB,EAAsBC,QAAtB,CAAhB;AACA,cAAMb,IAAIuC,MAAJ,CAAWJ,QAAX,EAAqBpC,KAAKqC,OAAL,CAAaR,GAAb,EAAkBU,OAAlB,CAArB,CAAN;AACAR,gBAAQlB,IAAR,IAAgB0B,OAAhB;AACD,OAPgB;;AAAA;AAAA;AAAA;AAAA,SAAjB;AAQA,UAAME,QAAQC,GAAR,CAAYR,QAAZ,CAAN;AACA,WAAOH,OAAP;AACD,GAbK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAeA,MAAMY;AAAA,gCAAc,WAAOC,SAAP,EAAkBC,YAAlB,EAAgCC,YAAhC,EAAiD;AACnEF,gBAAY5C,KAAKqC,OAAL,CAAaO,SAAb,CAAZ;AACA,UAAMG,SAAS/C,KAAKmB,IAAL,CAAUnB,KAAKe,OAAL,CAAa6B,SAAb,CAAV,EAAmC,UAAnC,CAAf;AACA,UAAM3C,IAAIuC,MAAJ,CAAWI,SAAX,EAAsBG,MAAtB,CAAN;AACA,UAAM9C,IAAI+C,SAAJ,CAAchD,KAAKe,OAAL,CAAa8B,YAAb,CAAd,CAAN;AACA,UAAM5C,IAAIgD,IAAJ,CAASF,MAAT,EAAiBF,YAAjB,CAAN;AACD,GANK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAQA,MAAMK,iBAAiB,CAACpB,cAAD,EAAiBqB,SAAjB,KAA+B;AACpDrB,mBAAiBsB,MAAMC,OAAN,CAAcvB,cAAd,IACbA,cADa,GAEb,CAACA,cAAD,CAFJ;AAGA,SAAOA,eACJwB,MADI,CACGlD,kBADH,EAEJkD,MAFI,CAEGH,UAAUhB,GAAV,CAActB,QAAS,IAAGA,IAAK,EAA/B,CAFH,CAAP;AAGD,CAPD;;AASA,MAAM0C;AAAA,gCAAc,WAClBC,GADkB,EAElBC,QAFkB,EAGlBC,aAHkB,EAIlBZ,YAJkB,EAKlBa,QALkB,EAMf;AACHb,mBAAe1B,YAAY0B,YAAZ,CAAf;AACA,UAAMd,QAAQ,MAAM9B,OAAOuD,QAAP,EAAiB,EAAExB,KAAKjC,KAAKqC,OAAL,CAAamB,GAAb,CAAP,EAAjB,CAApB;AACA,UAAMI,QAAQ,IAAIC,MAAJ,CACX,WAAUzC,YAAYsC,aAAZ,CAA2B,eAD1B,EAEZ,GAFY,CAAd;;AAHG;AAAA;AAAA;;AAAA;AAQH,2BAAiB1B,KAAjB,8HAAwB;AAAA,YAAfnB,IAAe;;AACtB,cAAMuB,WAAWpC,KAAKqC,OAAL,CAAamB,GAAb,EAAkB3C,IAAlB,CAAjB;AACA,cAAMP,WAAW,MAAML,IAAIqC,QAAJ,CAAaF,QAAb,EAAuB,OAAvB,CAAvB;AACA,cAAM0B,WAAWxD,SAASoB,OAAT,CAAiBkC,KAAjB,EAAwB,UAACG,KAAD,EAAQC,EAAR,EAAYC,GAAZ,EAAiBC,EAAjB,EAAwB;AAC/D,gBAAMC,SAASR,SAASM,GAAT,KAAiBA,GAAhC;AACA,iBAAQ,GAAED,EAAG,IAAGlB,YAAa,IAAGqB,MAAO,GAAED,EAAG,EAA5C;AACD,SAHgB,CAAjB;AAIA,cAAMjE,IAAImE,SAAJ,CAAchC,QAAd,EAAwB0B,QAAxB,CAAN;AACD;AAhBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBJ,GAvBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAyBA,MAAMO;AAAA,gCAAgB,WAAOC,UAAP,EAAmBC,OAAnB,EAA4BpB,SAA5B,EAA0C;AAC9D,UAAMqB,YAAYrB,UAAUhB,GAAV,CAAc;AAAA,aAAQnC,KAAKqC,OAAL,CAAaiC,UAAb,EAAyBzD,IAAzB,CAAR;AAAA,KAAd,CAAlB;AACA,UAAM4D,cAAc,CAAC,GAAG,IAAIC,GAAJ,CAAQF,SAAR,CAAJ,CAApB;AACA,UAAMG,gBAAgBF,YAAYG,MAAZ,CAAmB;AAAA,aAAQ3E,IAAI4E,cAAJ,CAAmBhE,IAAnB,CAAR;AAAA,KAAnB,CAAtB;AACA,UAAMqB,WAAWyC,cAAcxC,GAAd,CAAkB,gBAAQ;AACzC,YAAMI,UAAUvC,KAAKmB,IAAL,CAAUoD,OAAV,EAAmBvE,KAAKkB,QAAL,CAAcL,IAAd,CAAnB,CAAhB;AACAZ,UAAIgD,IAAJ,CAASpC,IAAT,EAAe0B,OAAf;AACD,KAHgB,CAAjB;AAIA,UAAME,QAAQC,GAAR,CAAYR,QAAZ,CAAN;AACD,GATK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAWA,MAAM4C;AAAA,gCAAY,WAAO;AACvB7C,UAAM,SADiB;AAEvB8C,sBAAkB,0BAFK;AAGvBnC,aAHuB;AAIvBoC,cAJuB;AAKvBlD,qBAAiB,CAAC,MAAD,CALM;AAMvB4B,oBAAgB,SANO;AAOvBZ,mBAAe,SAPQ;AAQvBmC,qBAAiB,EARM;AASvBC,oBAAgB;AATO,MAUrB,EAVc,EAUP;AACTtC,gBAAYA,aAAa5C,KAAKmB,IAAL,CAAUc,GAAV,EAAe,QAAf,CAAzB;AACA+C,iBAAaA,cAAc/C,GAA3B;AACA,UAAMY,eAAe7C,KAAKmB,IAAL,CAAU6D,UAAV,EAAsBvD,OAAOqB,YAAP,CAAtB,CAArB;;AAEA,UAAMH,YAAYC,SAAZ,EAAuBC,YAAvB,EAAqCC,YAArC,CAAN;AACAmC,qBAAiB7B,MAAMC,OAAN,CAAc4B,cAAd,IACbA,cADa,GAEb,CAACA,cAAD,CAFJ;AAGA,UAAME,eAAehF,eAAemD,MAAf,CAAsB2B,cAAtB,CAArB;AACA,UAAMG,cAAclC,eAAepB,cAAf,EAA+BqD,YAA/B,CAApB;AACA,UAAMxB,WAAW,MAAM/B,cAAciB,YAAd,EAA4BuC,WAA5B,CAAvB;AACA,UAAM7B,YAAYtB,GAAZ,EAAiB8C,eAAjB,EAAkCrB,aAAlC,EAAiDZ,YAAjD,EAA+Da,QAA/D,CAAN;AACA,QAAIuB,aAAJ,EAAmB;AACjBb,oBAAcxB,YAAd,EAA4BmC,UAA5B,EAAwCG,YAAxC;AACD;AACF,GA1BK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA4BAE,OAAOC,OAAP,GAAiBR,SAAjB","file":"index.js","sourcesContent":["const crypto = require('crypto')\nconst path = require('path')\nconst fse = require('fs-extra')\nconst globby = require('globby')\n\nconst fixedRootFiles = [\n  'favicon.ico',\n  'humans.txt',\n  'robots.txt',\n  'sitemap.xml',\n  '.well-known'\n]\n\nconst fixedNamesPatterns = ['!**/.well-known/**']\n\nconst hashFile = contents => {\n  const hash = crypto.createHash('sha256')\n  hash.update(contents)\n  return hash.digest('hex').substring(0, 8)\n}\n\nconst generateNewName = (file, checksum) => {\n  const dirname = path.dirname(file)\n  const ext = path.extname(file)\n  const basename = path.basename(file, ext)\n  return path.join(dirname, `${basename}.${checksum}${ext}`)\n}\n\nconst trimSlashes = str => {\n  if (str.startsWith('/')) {\n    str = str.substring(1)\n  }\n  if (str.endsWith('/')) {\n    str = str.substring(0, str.length - 1)\n  }\n  return str\n}\n\nconst toPath = str => {\n  str = trimSlashes(str)\n  return str.replace('/', path.sep)\n}\n\nconst renameStatics = async (src, staticPatterns) => {\n  const mapping = {}\n  const files = await globby(staticPatterns, { cwd: src })\n  const promises = files.map(async file => {\n    const filename = path.resolve(src, file)\n    const contents = await fse.readFile(filename)\n    const checksum = hashFile(contents)\n    const newFile = generateNewName(file, checksum)\n    await fse.rename(filename, path.resolve(src, newFile))\n    mapping[file] = newFile\n  })\n  await Promise.all(promises)\n  return mapping\n}\n\nconst shuffleDirs = async (staticSrc, staticTarget, targetPrefix) => {\n  staticSrc = path.resolve(staticSrc)\n  const tmpSrc = path.join(path.dirname(staticSrc), '__static')\n  await fse.rename(staticSrc, tmpSrc)\n  await fse.ensureDir(path.dirname(staticTarget))\n  await fse.move(tmpSrc, staticTarget)\n}\n\nconst getAllPatterns = (staticPatterns, rootFiles) => {\n  staticPatterns = Array.isArray(staticPatterns)\n    ? staticPatterns\n    : [staticPatterns]\n  return staticPatterns\n    .concat(fixedNamesPatterns)\n    .concat(rootFiles.map(file => `!${file}`))\n}\n\nconst replaceRefs = async (\n  dir,\n  patterns,\n  currentPrefix,\n  targetPrefix,\n  mappings\n) => {\n  targetPrefix = trimSlashes(targetPrefix)\n  const files = await globby(patterns, { cwd: path.resolve(dir) })\n  const regex = new RegExp(\n    `(['\"])\\/${trimSlashes(currentPrefix)}/(.*?)(['\"?])`,\n    'g'\n  )\n\n  for (let file of files) {\n    const filename = path.resolve(dir, file)\n    const contents = await fse.readFile(filename, 'utf-8')\n    const replaced = contents.replace(regex, (match, p1, uri, p3) => {\n      const newUri = mappings[uri] || uri\n      return `${p1}/${targetPrefix}/${newUri}${p3}`\n    })\n    await fse.writeFile(filename, replaced)\n  }\n}\n\nconst bumpRootFiles = async (currentDir, rootDir, rootFiles) => {\n  const fullFiles = rootFiles.map(file => path.resolve(currentDir, file))\n  const uniqueFiles = [...new Set(fullFiles)]\n  const existingFiles = uniqueFiles.filter(file => fse.pathExistsSync(file))\n  const promises = existingFiles.map(file => {\n    const newFile = path.join(rootDir, path.basename(file))\n    fse.move(file, newFile)\n  })\n  await Promise.all(promises)\n}\n\nconst cachebust = async ({\n  cwd = './.next',\n  replacePatterns = '**/*.+(js|json|css|html)',\n  staticSrc,\n  staticDest,\n  staticPatterns = ['**/*'],\n  currentPrefix = '/static',\n  targetPrefix = '/static',\n  extraRootFiles = [],\n  moveRootFiles = false\n} = {}) => {\n  staticSrc = staticSrc || path.join(cwd, 'static')\n  staticDest = staticDest || cwd\n  const staticTarget = path.join(staticDest, toPath(targetPrefix))\n\n  await shuffleDirs(staticSrc, staticTarget, targetPrefix)\n  extraRootFiles = Array.isArray(extraRootFiles)\n    ? extraRootFiles\n    : [extraRootFiles]\n  const allRootFiles = fixedRootFiles.concat(extraRootFiles)\n  const allPatterns = getAllPatterns(staticPatterns, allRootFiles)\n  const mappings = await renameStatics(staticTarget, allPatterns)\n  await replaceRefs(cwd, replacePatterns, currentPrefix, targetPrefix, mappings)\n  if (moveRootFiles) {\n    bumpRootFiles(staticTarget, staticDest, allRootFiles)\n  }\n}\n\nmodule.exports = cachebust\n"]}